{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","PostsList","userId","setSelectedPostId","selectedPostId","setPost","useState","posts","setPosts","useEffect","fetch","then","response","ok","json","Promise","reject","getUserPosts","allPosts","catch","error","console","log","className","map","post","title","id","type","onClick","NewCommentForm","postId","setComments","comments","name","setName","email","setEmail","body","setBody","commentAdder","event","preventDefault","comment","commentToSend","length","method","JSON","stringify","headers","onSubmit","placeholder","value","onChange","target","required","PostDetails","postInfo","setPostInfo","visibleComments","setVisibleComments","commentsFromServer","err","deleteComments","deleteComment","filter","App","setUserId","users","setUsers","slice","allUsers","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9562ba36.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getUsers = (): Promise<User[]> => {\n  return fetch(`${BASE_URL}/users/`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    })\n\n    .then(users => users.slice(0, 10));\n};\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\n\ntype Props = {\n  userId: number,\n  selectedPostId: number,\n  setSelectedPostId: (postId: number) => void\n  setPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userId,\n  setSelectedPostId,\n  selectedPostId,\n  setPost,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then(allPosts => setPosts(allPosts))\n      // eslint-disable-next-line no-console\n      .catch(error => console.log(error));\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul\n        className=\"PostsList__list\"\n        data-cy=\"postDetails\"\n      >\n        {posts && posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    setSelectedPostId(0);\n                    setPost(null);\n                  }}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    setSelectedPostId(post.id);\n                    setPost(post);\n                  }}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return fetch(`${BASE_URL}/posts${userId === 0 ? '' : `?userId=${userId}`}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { createComment } from '../../api/comments';\n\ntype Props = {\n  postId: number | null,\n  setComments: (comment: Comments[] | null) => void\n  comments: Comments[] | null,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  comments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const commentAdder = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const commentToSend: Comments = {\n      postId,\n      name,\n      email,\n      body,\n      id: comments && comments.length + 1,\n    };\n\n    createComment(commentToSend);\n    setComments(comments && [...comments, commentToSend]);\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        commentAdder(event);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = (postId: number | null): Promise<Comments[]> => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n\nexport const deleteComment = (id: number): Promise<Response> => {\n  return fetch(`${BASE_URL}/comments/${id}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const createComment = (comment: NewComment) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  })\n    .then(response => response.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n}) => {\n  const [postInfo, setPostInfo] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comments[] | null>(null);\n  const [visibleComments, setVisibleComments] = useState(true);\n\n  const commentsFromServer = (id: number | null) => {\n    getPostComments(id)\n      .then(comment => setComments(comment))\n      // eslint-disable-next-line no-console\n      .catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(post => setPostInfo(post))\n      // eslint-disable-next-line no-console\n      .catch(err => console.log(err));\n\n    commentsFromServer(selectedPostId);\n  }, [selectedPostId]);\n\n  const deleteComments = (id: number) => {\n    deleteComment(id);\n    setComments(comments && comments.filter(comment => comment.id !== id));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postInfo?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            if (comments?.length !== 0) {\n              setVisibleComments(!visibleComments);\n            }\n          }}\n        >\n          {`${visibleComments ? 'Hide ' : 'Show '}${comments?.length} comments`}\n        </button>\n\n        {visibleComments\n        && (\n          <ul className=\"PostDetails__list\">\n            {comments?.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    if (comment.id) {\n                      deleteComments(comment.id);\n                    }\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            setComments={setComments}\n            comments={comments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/api';\n\nconst App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [post, setPost] = useState<Post | null>(null);\n  const [users, setUsers] = useState<User[]>();\n\n  useEffect(() => {\n    getUsers()\n      .then(allUsers => setUsers(allUsers))\n      // eslint-disable-next-line no-console\n      .catch(err => console.log(err));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={(event) => {\n              setUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users\n              && users.map(user => (\n                <option key={user.id} value={user.id}>{user.name}</option>\n              ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={userId}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n            setPost={setPost}\n          />\n        </div>\n        {post\n          && (\n            <div className=\"App__content\">\n              <PostDetails\n                selectedPostId={selectedPostId}\n              />\n            </div>\n          )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}